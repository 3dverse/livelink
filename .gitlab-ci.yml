# SETTINGS ############################################################################################################
include:
  - project: 3dverse/platform/ci-utils/gitlab-templates
    file:
      - /ci/.bases/_index.yaml
      - /ci/.bases/regcreds.yaml
      - /ci/.bases/node/_index.yaml

variables:
  NODE_VERSION: "22"
  LIVELINK_JS_PACKAGE: livelink.js/3dverse-livelink
  LIVELINK_THREE_PACKAGE: livelink.three/3dverse-livelink-three
  LIVELINK_REACT_PACKAGE: livelink.react/3dverse-livelink-react
  LIVELINK_REACT_UI_PACKAGE: livelink.react.ui/3dverse-livelink-react-ui
  LIVELINK_SAMPLES_PACKAGE: livelink.samples/livelink.samples

# TEMPLATES ###########################################################################################################
.update-version:
  script:
    - |
      set -e
      latest_published_version=$(npm show @3dverse/$PACKAGE_NAME version)
      npm install semver --no-save

      semver_script="const semver = require('semver'); \
      const latest = '$latest_published_version'; \
      const current = require('./package.json').version; \
      if(semver.gte(latest, current)) { \
        console.log(semver.inc(latest, 'patch')); \
      }"

      new_package_version=$(node -e "$semver_script")
      if [ "$new_package_version" != "" ]; then
        npm version $new_package_version --no-git-tag-version
      fi

.publish:
  stage: deploy
  extends:
    - .runner-onprem
  image: node:${NODE_VERSION}
  before_script:
    - !reference [.npm-regcreds, before_script]
    - npm config set @3dverse:registry="https://registry.npmjs.org" --userconfig=".npmrc"
    - npm config set //registry.npmjs.org/:_authToken="${NPMJS_ACCESS_TOKEN}" --userconfig=".npmrc"
    - tar -zxf ${PACKAGE_PATH_NAME}-*.tgz --strip-components=1 -C $PACKAGE_DIR
    - cd $PACKAGE_DIR
    - npm pkg delete private
  script:
    - npm publish --access public

.docs:
  stage: deploy
  extends:
    - .env-dev
    - .runner-onprem
  image: node:${NODE_VERSION}
  before_script:
    - !reference [.npm-regcreds, before_script]
    - cd $PACKAGE_DIR
    - !reference [.node-cache, before_script]
  script:
    - npm run typedoc:md
    - tar -zcvf docs-md.tgz -C docs-md/ .
    - |
      echo "Publishing $PACKAGE_DIR docs"

      echo "Package latest"
      curl \
          --location --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
          --upload-file docs-md.tgz \
          "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_DIR}/latest/docs-md.tgz"

      if [ -n "$CI_COMMIT_TAG" ]; then
          echo "Package $CI_COMMIT_TAG"
          curl \
              --location --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
              --upload-file docs-md.tgz \
              "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_DIR}/${CI_COMMIT_TAG}/docs-md.tgz"
      fi

# JOBS ################################################################################################################
# BUILD
js:build:
  stage: build
  extends:
    - .env-dev
    - .runner-onprem
  image: node:${NODE_VERSION}
  artifacts:
    expire_in: 1 day
    paths:
      - "**/_prebuild/"
      - "**/dist/"
  before_script:
    - !reference [.npm-regcreds, before_script]
    - !reference [.node-cache, before_script]
  script:
    - npm run build:js
    - npm run build:react
    - npm run build:react.ui
    - npm run build:three
    - npm run build:samples
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "release"
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - livelink.samples/**/*
        - livelink.samples/*

create-mr:
  stage: deploy
  extends:
    - .env-dev
    - .runner-onprem
  image: node:${NODE_VERSION}-alpine
  script:
    - npx tsx .ci/create-mr.mts
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

pages:
  stage: deploy
  extends:
    - .env-dev
    - .runner-onprem
  needs:
    - job: js:build
      artifacts: true
  artifacts:
    paths:
      - public/
  before_script:
    - mkdir public
  script:
    - cp -r livelink.samples/dist/* public/
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - livelink.samples/**/*
        - livelink.samples/*

# DOCS
# js:livelink.js:docs:
#   stage: deploy
#   extends:
#     - .docs
#   needs:
#     - job: js:livelink.js:build
#       artifacts: true
#   variables:
#     PACKAGE_DIR: livelink.js
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event"
#       when: never
#     - if: $CI_COMMIT_TAG
#     - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
#       changes:
#         - livelink.js/**/*
#         - livelink.js/*
#     - when: never

# js:livelink.react:docs:
#   stage: deploy
#   extends:
#     - .docs
#   needs:
#     - job: js:livelink.js:build
#       artifacts: true
#   variables:
#     PACKAGE_DIR: livelink.react
#   rules:
#     # FIXME: The rules aren't correct, it should be performed after the publish job of livelink.react
#     # using the version number determined in the publish job.
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event"
#       when: never
#     - if: $CI_COMMIT_TAG
#     - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
#       changes:
#         - livelink.react/**/*
#         - livelink.react/*
#     - when: never

# js:livelink.js:docs-trigger:
#   stage: deploy
#   needs:
#     - job: js:livelink.js:docs
#       artifacts: false
#     - job: js:livelink.react:docs
#       artifacts: false
#   variables:
#     # These variables will be used in the triggered downstream pipeline to download the generated docs artifacts.
#     LIVELINK_PACKAGE_NAMES: livelink.js livelink.react
#     LIVELINK_PACKAGE_ROOT: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/
#     LIVELINK_PACKAGE_PATH: /${CI_COMMIT_TAG}/docs-md.tgz
#     SYNC_LIVELINK_JS: "true"
#   rules:
#     - if: $CI_COMMIT_TAG
#     - when: never
#   trigger:
#     project: 3dverse/corp/3dverse-docs
#     strategy: depend

# VERSION #############################################################################################################
version:comment-mr:
  stage: deploy
  extends:
    - .runner-onprem
  image: node:${NODE_VERSION}-alpine
  before_script:
    - !reference [.npm-regcreds, before_script]
    - !reference [.node-cache, before_script]
    - apk add --no-cache git
  script:
    - npx changeset-conventional-commits
    # - npx changesets-gitlab comment
  variables:
    GITLAB_CI_USER_NAME: ${BOT_3DVERSE_USER_NAME}
    GITLAB_CI_USER_EMAIL: ${BOT_3DVERSE_USER_EMAIL}
    INPUT_TITLE: "chore: new release"
  rules:
    - when: never # FIXME: Enable when a custom changesets-gitlab package is available.
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH == 'release'

version:release:
  stage: deploy
  extends:
    - .runner-onprem
  image: node:${NODE_VERSION}-alpine
  needs:
    - job: js:build
      artifacts: true
  before_script:
    - !reference [.npm-regcreds, before_script]
    - !reference [.node-cache, before_script]
    - apk add --no-cache git
    - |
      git config --global user.name "${BOT_3DVERSE_USER_NAME}"
      git config --global user.email "${BOT_3DVERSE_USER_EMAIL}"
      git checkout -b $CI_COMMIT_REF_NAME || git checkout $CI_COMMIT_REF_NAME
      git remote set-url origin "https://${BOT_3DVERSE_USER_USERNAME}:${BOT_3DVERSE_GITLAB_API_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
    - |
      npm config set @3dverse:registry="https://registry.npmjs.org" --userconfig=".npmrc"
      npm config set //registry.npmjs.org/:_authToken="${NPMJS_ACCESS_TOKEN}" --userconfig=".npmrc"
  script:
    - npx changeset-conventional-commits
    - npx @changesets/cli version
    - npx @changesets/cli tag
    - git push origin $CI_COMMIT_REF_NAME --follow-tags || git push --set-upstream origin $CI_COMMIT_REF_NAME --follow-tags
    - npx @changesets/cli publish
  variables:
    GIT_STRATEGY: clone
  rules:
    - if: $CI_COMMIT_BRANCH == "release"
