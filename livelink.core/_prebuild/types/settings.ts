/**
 * DO NOT EDIT THIS FILE MANUALLY.
 * This file has been generated automatically from ftl-schemas
 */

import type { UUID, Quat, Vec3, Vec2, Int32, UInt32, Float, Int8 } from "../../sources/types";

/**
 * Settings for debug lines
 */
export type DebugLines = Partial<{
    /**
     * Whether to draw debug lines
     */
    drawDebugLines: boolean;
    /**
     * Whether to draw geometry of physics bodies
     */
    drawPhysicsBodies: boolean;
    /**
     * Whether to draw physics body axes
     */
    drawPhysicsBodyAxes: boolean;
    /**
     * Whether to draw the center of mass of physics bodies
     */
    drawCenterOfMass: boolean;
    /**
     * Whether to draw joint-related debug lines
     */
    drawJoints: boolean;
    /**
     * Whether to draw the skeletons of rigged characters
     */
    drawSkeletons: boolean;
    /**
     * Whether to draw the bouding boxes of entities
     */
    drawBoundingBoxes: boolean;
    /**
     * Whether to draw camera frustums
     */
    drawCameraFrustums: boolean;
    /**
     * Whether to draw light-related debug lines
     */
    drawLights: boolean;
    /**
     * Whether to draw reflection probes
     */
    drawReflectionProbes: boolean;
}>;

/**
 * Settings for the display
 */
export type Display = Partial<{
    /**
     * Maximum number of Frames Per Second the renderer is allowed to produce
     */
    maxFPS: UInt32;
    /**
     * Maximum resolution of loaded textures
     */
    maxTextureSize: UInt32;
    /**
     * Draw frame without input events
     */
    forceRedraw: boolean;
    /**
     * Toggle debug lines
     */
    drawDebugLines: boolean;
    /**
     * Toggle camera frustum
     */
    drawCameraFrustum: boolean;
    /**
     * Toggle bounding box
     */
    drawBoundingBox: boolean;
    /**
     * Toggle frustum culling
     */
    enableFrustumCulling: boolean;
    /**
     * Toggle texture streaming
     */
    enableTextureStreaming: boolean;
}>;

/**
 * Settings for the environment
 */
export type Environment = Partial<{
    /**
     * Solid color used to clear the screen before drawing.
     */
    clearColor: Vec3;
    /**
     * Color of the spherical gradient at the top of the sphere.
     */
    ambientColorTop: Vec3;
    /**
     * Color of the spherical gradient at the bottom of the sphere.
     */
    ambientColorBottom: Vec3;
}>;

/**
 * Miscellaneous settings
 */
export type Misc = Partial<{
    /**
     * The maximum number of time a linker can reference itself.
     */
    maxLinkersRecursionCount: UInt32;
    /**
     * The maximum time a script can run before getting aborted.
     */
    maxScriptExecutionTimeInMs: UInt32;
}>;

/**
 * Settings for the network
 */
export type Network = Partial<{
    /**
     * Time to wait in seconds with no client before closing the session.
     */
    clientConnectionTimeout: UInt32;
    /**
     * Time to maintain the session alive without any active client in seconds.
     */
    timeToLiveWithInactiveUsersInSeconds: UInt32;
    /**
     * 
     */
    waitForDefaultAssetsTimeoutInSeconds: UInt32;
}>;

/**
 * Settings for the physics engine.
 */
export type Physics = Partial<{
    /**
     * Global gravity applied throughout the scene.
     */
    gravity: Vec3;
    /**
     * The approximate size of objects in the simulation. This is used to estimate certain length-related tolerances.
     */
    toleranceLength: Float;
    /**
     * The typical magnitude of velocities of objects in simulation. This is used to estimate whether a contact should be treated as bouncing or resting based on its impact velocity, and a kinetic energy threshold below which the simulation may put objects to sleep. For normal physical environments, a good choice is the approximate speed of an object falling under gravity for one second.
     */
    toleranceSpeed: Float;
}>;

/**
 * Renderer settings
 */
export type Renderer = Partial<{
    /**
     * Enable occlusion culling.
     */
    cpuOcclusionCulling: boolean;
    /**
     * Time to wait for the GPU in milliseconds.
     */
    endFrameTimeoutInMilliseconds: UInt32;
}>;

/**
 * Sound settings
 */
export type Sound = Partial<{
    /**
     * Enable 3dverse sound.
     */
    enabled: boolean;
}>;

/**
 * Settings for the scene streaming
 */
export type Streaming = Partial<{
    /**
     * Scenes that enter this radius around the camera get loaded.
     */
    streamingLoadingRadius: Float;
    /**
     * Scenes that exit this radius around the camera get unloaded.
     */
    streamingUnloadingRadius: Float;
}>;

/**
 * Settings for voxel rendering
 */
export type Voxel = Partial<{
    /**
     * Maximum number of color samples used to compute the color LUT.
     */
    maxNumberAlbedoValues: UInt32;
}>;
