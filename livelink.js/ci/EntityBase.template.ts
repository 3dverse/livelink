/**
 * DO NOT EDIT THIS FILE MANUALLY.
 * This file has been generated automatically from ftl-schemas
 */
import type { Components, ComponentName, ComponentType, EntityCore } from "@3dverse/livelink.core";
import { TypedEventTarget } from "../sources/TypedEventTarget";
import { EntityEvents } from "../sources/scene/EntityEvents";

/**
 * If specified as a component value, the default values will be applied.
 * Note that the compponent default values might on future versions of their schema.
 */
export type DefaultValue = "default";

/**
 *
 */
export abstract class EntityBase extends TypedEventTarget<EntityEvents> {
    /**
     * @internal
     */
    public static readonly component_names: Array<ComponentName> = [
{{componentNames}}
    ];

    /**
     *
     */
    #core: EntityCore;

    /**
     * @internal
     */
    get _core(): EntityCore {
        return this.#core;
    }

    /**
     *
     */
    get euid(): Readonly<Components.Euid> {
        return this.#core.euid;
    }

{{componentAttributes}}

    /**
     *
     */
    constructor({ euid }: { euid: Components.Euid }) {
        super();
        this.#core = { euid };
    }

    /**
     *
     */
    toJSON(): object {
        const { euid, ...components } = this.#core;
        return { euid: { value: euid.value }, ...components} ;
    }

    /**
     * Sets the value of a component. Used by the component setters.
     *
     * @internal
     */
    protected abstract _setComponentValue<_ComponentName extends ComponentName>({
        ref,
        component_name,
        value,
    }: {
        ref: ComponentType<_ComponentName> | undefined
        component_name: _ComponentName;
        value: Partial<ComponentType<_ComponentName>> | DefaultValue | undefined;
    }): ComponentType<_ComponentName> | undefined;

    /**
     * @internal
     */
    protected _unsafeSetComponentValue<_ComponentName extends ComponentName>({
        component_name,
        value,
    }: {
        component_name: _ComponentName;
        value: ComponentType<_ComponentName>;
    }): void {
        //@ts-expect-error: sssh go back to sleep
        this.#core[component_name] = value;
    }
}
