/**
 * DO NOT EDIT THIS FILE MANUALLY.
 * This file has been generated automatically from ftl-schemas
 */
import { LivelinkCoreModule } from "@3dverse/livelink.core";
import type { Components, EditorEntity, EntityInterface, RTID, UUID } from "@3dverse/livelink.core";

/**
 *
 */
export class EntityBase extends EventTarget implements EntityInterface {
    /**
     *
     */
    private euid: Components.Euid | null = null;

{{componentAttributes}}

    /**
     *
     */
    get rtid(): RTID | null {
        return this.euid?.rtid ?? null;
    }
    /**
     *
     */
    get id(): UUID | null {
        return this.euid?.value ?? null;
    }
    /**
     *
     */
    get name(): string {
        return this.debug_name?.value ?? "<unnamed>";
    }

    /**
     *
     */
    isInstantiated(): boolean {
        return this.euid !== null && this.euid.rtid !== BigInt(0);
    }

    /**
     *
     */
    protected _setEuid(euid: UUID) {
        this.euid = { value: euid, rtid: BigInt(0) };
    }
    
    /**
     *
     */
    protected _is_visible: boolean = true;

    /**
     *
     */
    protected _parse({ editor_entity }: { editor_entity: EditorEntity }) {
        const components = editor_entity.components;
        if (!components.euid) {
            throw new Error("Trying to parse an entity without EUID");
        }

        this.euid = {
            value: (components.euid as { value: UUID }).value,
            rtid: BigInt(editor_entity.rtid),
        };
    
        this._is_visible = editor_entity.isVisible;

        delete components.euid;

        for (const component_type in components) {
            //@ts-ignore
            this[component_type] = components[component_type];
        }

        // Remove any undefined component
        for (const k of Object.keys(this)) {
            //@ts-ignore
            if (this[k] === undefined) {
                //@ts-ignore
                delete this[k];
            }
        }
    }

    /**
     * @internal
     */
    toJSON() {
        let serialized: Record<string, unknown> = {};
        for (const p in this) {
            if (this._isSerializableComponent(p, this[p])) {
                serialized[p as string] = this[p];
            }
        }
        return serialized;
    }

    /**
     * @internal
     */
    public _isSerializableComponent(prop: PropertyKey, v: any) {
        return (
            typeof prop === "string" &&
            v !== undefined &&
            prop[0] !== "_" &&
            Object.values(LivelinkCoreModule.Enums.ComponentHash).includes(prop)
        );
    }
}
